package leetcode.editor.cn;//ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËæìÂÖ•‰∏Ä‰∏™ÈìæË°®ÁöÑÂ§¥ËäÇÁÇπÔºåÂèçËΩ¨ËØ•ÈìæË°®Âπ∂ËæìÂá∫ÂèçËΩ¨ÂêéÈìæË°®ÁöÑÂ§¥ËäÇÁÇπ„ÄÇ
//
// 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•: 1->2->3->4->5->NULL
//ËæìÂá∫: 5->4->3->2->1->NULL 
//
// 
//
// ÈôêÂà∂Ôºö 
//
// 0 <= ËäÇÁÇπ‰∏™Êï∞ <= 5000 
//
// 
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 206 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/reverse-linked-list/ 
//
// Related Topics ÈÄíÂΩí ÈìæË°® üëç 522 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)

import java.util.Stack;

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class SolutionOffer24 {

    public class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    public ListNode reverseList(ListNode head) {
        Stack<ListNode> stack = new Stack<>();
        ListNode node = head;
        while (node != null) {
            stack.push(node);
            node = node.next;
        }
        ListNode res = new ListNode(-1);
        node = res;
        while(stack.size() > 0){
            ListNode curNode = stack.pop();
            node.next = curNode;
            node = node.next;
        }
        node.next = null;
        return res.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
